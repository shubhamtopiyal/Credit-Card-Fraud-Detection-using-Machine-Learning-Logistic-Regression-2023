# -*- coding: utf-8 -*-
"""Credit Card Fraud Detection using Machine Learning & Logistic Regression - Major Project 2023.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AKaA5GeYM6wtcCbTVHXzmVLKd5rB15wg

**CREDIT CARD FRAUD DETECTION USING MACHINE LEARNING**

- Importing Dependencies or libraries
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

""" - Loading the data from dataset"""

credit_card_data = pd.read_csv("/content/creditcard.csv")

""" - Analyzing the dataset"""

credit_card_data.shape

# Finding first 5 rows of dataset

credit_card_data.head()

# Finding last 5 rows of dataset

credit_card_data.tail()

# Information about the Dataset

credit_card_data.info()

# Applying Descriptive Statistics on that dataset

credit_card_data.describe()

# Finding the missing or null value in the dataset

credit_card_data.isnull().sum()

"""- Data Processing"""

# Assigning into a new object

new_credit_card_data = credit_card_data.dropna()

# Again checking the dataset for null values

new_credit_card_data.isnull().sum()

new_credit_card_data.shape

#Distribution of data

new_credit_card_data['Class'].value_counts()

"""**DATA IS HIGHLY UNBALANCED**

1 --> LEGITIMATE TRANSACTION

2 --> FRAUDULENT TRANSACTION
"""

legit = new_credit_card_data[new_credit_card_data.Class == 0]
fraud = new_credit_card_data[new_credit_card_data.Class == 1]

print(legit.shape)
print(fraud.shape)

legit.Amount.describe()

fraud.Amount.describe()

new_credit_card_data.groupby('Class').mean()

"""**Under-Sampling**

Building a sample dataset that contains Legitimate and Fraudulent transactions.


- No. of fraudulent transactions = 492
"""

legit_sample = legit.sample(n=492)

"""- Concatenating Two DataFrame"""

new_dataset = pd.concat([legit_sample, fraud], axis = 0)

new_dataset.info()

new_dataset.describe()

new_dataset.isnull().sum()

new_dataset.head()

new_dataset.tail()

new_dataset['Class'].value_counts()

new_dataset.groupby('Class').mean()

"""- Splitting the data into Features & Targets(0,1)"""

X = new_dataset.drop(columns = 'Class', axis = 1)
Y = new_dataset['Class']

print(X)

"""- Splitting the data into Training Data & Testing Data"""

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size=0.2, stratify=Y, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

"""**MODEL TRAINING**

- Logistic Regression
"""

model = LogisticRegression(solver='lbfgs', max_iter=500)

# Training the Logistic Regression Model with Training Data

model.fit(X_train, Y_train)

"""**MODEL EVALUATION**

- Accuracy Score
"""

# Accuracy on training data

X_train_prediction = model.predict(X_train)

training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print("Accuracy on training data: ", training_data_accuracy)

# Accuracy on testing data

X_test_prediction = model.predict(X_test)

test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print("Accuracy on testing data", test_data_accuracy)

